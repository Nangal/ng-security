/*
 ngsecurity v1.2.2
 (c) 2015 Concrete Solutions, Inc.
 License: MIT
*/
//# sourceMappingURL=ngsecurity.min.js.map
'use strict';(function(){function h(c){return{link:function(f,b,a){var d=b.css("display");f.$watch(function(){return c.isAuthenticated()},function(a){a?b.css("display",d):b.css("display","none")})},restrict:"A"}}function k(c){return{link:function(f,b,a){var d=b.css("display");f.$watch(function(){return c.isAuthenticated()},function(a){a?b.css("display","none"):b.css("display",d)})},restrict:"A"}}function l(c){return{link:function(f,b,a){var d=b.css("display"),g=a.ngPermissionType;f.$watch(function(){return a.ngIfPermission},
function(a){a=a.split(",");c.getPermissionValidation(g)(a)?b.css("display",d):b.css("display","none")})},restrict:"A"}}function m(c,f){return{link:function(b,a,d){var g=a.css("display"),r=d.ngPermissionType;b.$watch(function(){return f(d.ngIfPermissionModel)(b)},function(b){c.hasPermission(b)||c.getPermissionValidation(r)(b)?a.css("display",g):a.css("display","none")})},restrict:"A"}}function n(c){return{link:function(f,b,a){var d=a.ngPermissionType;f.$watch(function(){return a.ngEnabledPermission},
function(a){a=a.split(",");c.getPermissionValidation(d)(a)?b.removeAttr("disabled"):b.attr("disabled","true")})},restrict:"A"}}function p(c,f,b,a){var d={login:function(){return g[a.strategy].apply(this,arguments)},loginByUrl:function(a,c){return f(function(e,f){b.post(a,c).success(function(a){d.login(a.token,a.user,a.permissions);e(a)}).error(f)})},logout:function(){c.remove(a.storageName.token);c.remove(a.storageName.user);c.remove(a.storageName.permissions)},hasPermission:function(b){var d=c.getObject(a.storageName.permissions);
return d?-1!==d.indexOf(b):!1},hasAllPermission:function(b){var d=c.getObject(a.storageName.permissions),e=!0;b&&d?angular.forEach(b,function(a){-1===d.indexOf(a)&&(e=!1)}):e=!1;return e},hasAnyPermission:function(b){var d=c.getObject(a.storageName.permissions),e=!1;b&&d&&angular.forEach(b,function(a){-1!==d.indexOf(a)&&(e=!0)});return e},getPermissionValidation:function(a){var b={ANY:d.hasAnyPermission,ALL:d.hasAllPermission};a||(a="ANY");return b[a]},isAuthenticated:function(){return!!c.get(a.storageName.token)},
getUser:function(){return c.getObject(a.storageName.user)}},g={jwt:function(b,d){var e;e=b.split(".")[1];if(2===e.length%4)e+="==";else if(3===e.length%4)e+="=";else if(0!==e.length%4)throw"Invalid token string.";e=JSON.parse(atob(e+"=="));c.put(a.storageName.token,a.token.prefix+b);c.putObject(a.storageName.user,e);c.putObject(a.storageName.permissions,d)},simple:function(b,d,e){c.put(a.storageName.token,a.token.prefix+b);c.putObject(a.storageName.user,d);c.putObject(a.storageName.permissions,e)}};
return d}function q(c,f,b,a){return{request:function(d){d.headers[a.token.header]=b.get(a.storageName.token);return d},responseError:function(b){var g=a.responseErrorName;g[b.status]&&c.$broadcast(g[b.status],b);return f.reject(b)}}}angular.module("ngSecurity",["ngCookies"]);angular.module("ngSecurity").directive("ngIfAuthenticated",h).directive("ngIfAnonymous",k).directive("ngIfPermission",l).directive("ngIfPermissionModel",m).directive("ngEnabledPermission",n);h.$inject=["$security"];k.$inject=
["$security"];l.$inject=["$security"];m.$inject=["$security","$parse"];n.$inject=["$security"];angular.module("ngSecurity").provider("$securityConfig",function(){var c={},f={strategy:"simple",token:{header:"Authorization",prefix:""},storageName:{token:"ng-security-authorization",user:"ng-security-user",permissions:"ng-security-permissions"},responseErrorName:{401:"unauthenticated",403:"permissionDenied"}};c.$get=function(){return f};c.configure=function(b){f=angular.merge(f,b)};return c});angular.module("ngSecurity").factory("$security",
p).factory("$securityInterceptor",q);p.$inject=["$cookies","$q","$http","$securityConfig"];q.$inject=["$rootScope","$q","$cookies","$securityConfig"]}).call(window);
