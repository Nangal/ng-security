/*
 ngsecurity v1.1.1
 (c) 2015 Concrete Solutions, Inc.
 License: MIT
*/
//# sourceMappingURL=ngsecurity.min.js.map
'use strict';(function(){function g(c){return{link:function(d,b,a){var e=b.css("display");d.$watch(function(){return c.isAuthenticated()},function(f){f?b.css("display",e):b.css("display","none")})},restrict:"A"}}function h(c){return{link:function(d,b,a){var e=b.css("display");d.$watch(function(){return c.isAuthenticated()},function(f){f?b.css("display","none"):b.css("display",e)})},restrict:"A"}}function k(c){return{link:function(d,b,a){var e=b.css("display"),f=a.ngPermissionType;d.$watch(function(){return a.ngIfPermission},
function(a){a=a.split(",");c.getPermissionValidation(f)(a)?b.css("display",e):b.css("display","none")})},restrict:"A"}}function l(c,d){return{link:function(b,a,e){var f=a.css("display"),q=e.ngPermissionType;b.$watch(function(){return d(e.ngIfPermissionModel)(b)},function(b){c.hasPermission(b)||c.getPermissionValidation(q)(b)?a.css("display",f):a.css("display","none")})},restrict:"A"}}function m(c){return{link:function(d,b,a){var e=a.ngPermissionType;d.$watch(function(){return a.ngEnabledPermission},
function(a){a=a.split(",");c.getPermissionValidation(e)(a)?b.removeAttr("disabled"):b.attr("disabled","true")})},restrict:"A"}}function n(c,d,b,a){var e={login:function(b,e,d){c.put(a.storageName.token,a.token.prefix+b);c.putObject(a.storageName.user,e);c.putObject(a.storageName.permissions,d)},loginByUrl:function(a,c){return d(function(d,r){b.post(a,c).success(function(a){e.login(a.token,a.user,a.permissions);d(a)}).error(r)})},logout:function(){c.remove(a.storageName.token);c.remove(a.storageName.user);
c.remove(a.storageName.permissions)},hasPermission:function(b){return-1!==c.getObject(a.storageName.permissions).indexOf(b)},hasAllPermission:function(b){var e=c.getObject(a.storageName.permissions),d=!0;angular.isDefined(b)?angular.forEach(b,function(a){-1===e.indexOf(a)&&(d=!1)}):d=!1;return d},hasAnyPermission:function(b){var e=c.getObject(a.storageName.permissions),d=!1;angular.isDefined(b)&&angular.forEach(b,function(a){-1!==e.indexOf(a)&&(d=!0)});return d},getPermissionValidation:function(a){var b=
{ANY:e.hasAnyPermission,ALL:e.hasAllPermission};a||(a="ANY");return b[a]},isAuthenticated:function(){return!!c.get(a.storageName.token)},getUser:function(){return c.getObject(a.storageName.user)}};return e}function p(c,d,b,a){return{request:function(c){c.headers[a.token.header]=b.get(a.storageName.token);return c},responseError:function(b){var f=a.responseErrorName;f[b.status]&&c.$broadcast(f[b.status],b);return d.reject(b)}}}angular.module("ngSecurity").directive("ngIfAuthenticated",g).directive("ngIfAnonymous",
h).directive("ngIfPermission",k).directive("ngIfPermissionModel",l).directive("ngEnabledPermission",m);g.$inject=["$security"];h.$inject=["$security"];k.$inject=["$security"];l.$inject=["$security","$parse"];m.$inject=["$security"];angular.module("ngSecurity",["ngCookies"]);angular.module("ngSecurity").provider("$securityConfig",function(){var c={},d={token:{header:"Authorization",prefix:""},storageName:{token:"ng-security-authorization",user:"ng-security-user",permissions:"ng-security-permissions"},
responseErrorName:{401:"unauthenticated",403:"permissionDenied"}};c.$get=function(){return d};c.configure=function(b){d=angular.merge(d,b)};return c});angular.module("ngSecurity").factory("$security",n).factory("$securityInterceptor",p);n.$inject=["$cookies","$q","$http","$securityConfig"];p.$inject=["$rootScope","$q","$cookies","$securityConfig"]}).call(window);
